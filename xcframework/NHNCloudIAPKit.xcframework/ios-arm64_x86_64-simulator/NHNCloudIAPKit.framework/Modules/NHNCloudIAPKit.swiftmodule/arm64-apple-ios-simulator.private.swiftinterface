// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NHNCloudIAPKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreTelephony
import CryptoKit
import Foundation
import Network
import Security
import StoreKit
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@_hasMissingDesignatedInitializers @available(iOS 15.0.0, *)
public class InAppPurchaseMobillConfig {
  public static func setForceURL(_ url: Swift.String?)
  public static var forceURL: Swift.String? {
    get
  }
  @objc deinit
}
@available(iOS 15.0.0, *)
public enum HTTPError : Swift.Error {
  case invalidResponse
  case invalidResponseHeader
  case statusCode(Swift.Int)
  case apiFailure(code: Swift.Int?, message: Swift.String?)
  case decodingError(any Swift.Error)
}
extension NHNCloudIAPKit.HTTPError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 15.0.0, *)
public enum NHNCloudInAppPurchaseServiceZone : Swift.Int, Swift.Codable {
  case real
  case alpha
  case beta
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 15.0.0, *)
open class Configuration : Swift.Codable, Swift.Equatable {
  public var appKey: Swift.String
  public var serviceZone: NHNCloudIAPKit.NHNCloudInAppPurchaseServiceZone
  public init(appKey: Swift.String, serviceZone: NHNCloudIAPKit.NHNCloudInAppPurchaseServiceZone = .real)
  public static func == (lhs: NHNCloudIAPKit.Configuration, rhs: NHNCloudIAPKit.Configuration) -> Swift.Bool
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 15.0.0, *)
public enum InAppPurchaseProductType : Swift.String {
  case unknown
  case consumable
  case autoRenewableSubscription
  case consumableSubscription
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 15.0.0, *)
public struct InAppPurchaseProduct {
  public var productIdentifier: Swift.String {
    get
  }
  public var productSeq: Swift.Int {
    get
  }
  public var productName: Swift.String? {
    get
  }
  public var productType: NHNCloudIAPKit.InAppPurchaseProductType {
    get
  }
  public var price: Foundation.Decimal? {
    get
  }
  public var currency: Swift.String? {
    get
  }
  public var localizedTitle: Swift.String? {
    get
  }
  public var localizedDescription: Swift.String? {
    get
  }
  public var localizedPrice: Swift.String? {
    get
  }
  public var storeCode: Swift.String {
    get
  }
  public var isActive: Swift.Bool {
    get
  }
}
extension NHNCloudIAPKit.InAppPurchaseProduct : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension NHNCloudIAPKit.InAppPurchaseProduct : Swift.Equatable {
  public static func == (lhs: NHNCloudIAPKit.InAppPurchaseProduct, rhs: NHNCloudIAPKit.InAppPurchaseProduct) -> Swift.Bool
}
extension NHNCloudIAPKit.InAppPurchaseProduct : Swift.Sendable {
}
@available(iOS 15.0.0, *)
public struct InAppPurchaseProductsResponse {
  public let products: [NHNCloudIAPKit.InAppPurchaseProduct]
  public let invalidProducts: [NHNCloudIAPKit.InAppPurchaseProduct]
}
extension NHNCloudIAPKit.InAppPurchaseProductsResponse : Swift.Sendable {
}
extension NHNCloudIAPKit.InAppPurchaseProductsResponse : Swift.Equatable {
  public static func == (lhs: NHNCloudIAPKit.InAppPurchaseProductsResponse, rhs: NHNCloudIAPKit.InAppPurchaseProductsResponse) -> Swift.Bool
}
@available(iOS 15.0.0, *)
public enum InAppPurchaseError : Swift.Error {
  case unknown(error: any Swift.Error)
  case notInitialized
  case invalidUserId
  case invalidProduct
  case invalidVerificationVersion
  case emptyRestorePayment
  case requestProductError(error: any Swift.Error)
  case failedPurchase(error: (any Swift.Error)? = nil)
  case failedVerifiedPurchase(error: any Swift.Error)
  case userCancelled
  case pending
  case failedRestore(error: any Swift.Error)
  case unverifiedPurchase(error: any Swift.Error)
  case mobillError(error: NHNCloudIAPKit.MobillError, cause: (any Swift.Error)?)
  case decodingError(error: any Swift.Error)
  case networkNotAvailable
  case failedRequest(status: Swift.Int?)
  case requestTimeout
  case invalidRequest
  case invalidURL
  case invalidResponse
  case alreadyInProgress
  case requiresSecureConnection
  case networkError(error: any Swift.Error)
}
extension NHNCloudIAPKit.InAppPurchaseError {
  public var code: Swift.Int {
    get
  }
}
extension NHNCloudIAPKit.InAppPurchaseError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
extension NHNCloudIAPKit.InAppPurchaseError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension NHNCloudIAPKit.InAppPurchaseError {
  public var isNetworkError: Swift.Bool {
    get
  }
}
@available(iOS 15.0.0, *)
public enum MobillErrorCode {
  public enum Known : Swift.Int, Swift.CaseIterable {
    case invalidRequestSignature
    case purchaseLimitExceeded
    case failStoreVerify
    case paymentInvalid
    case failChangeStatus
    case storeNotAvailable
    case paymentNotFound
    case alreadyConsumed
    case refunded
    case receiptInvalid
    case subscriptionExpired
    case alreadySubscribed
    case productInvalid
    case userInvalid
    case renewalPaymentNotFound
    case requestFailed
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [NHNCloudIAPKit.MobillErrorCode.Known]
    public typealias RawValue = Swift.Int
    public static var allCases: [NHNCloudIAPKit.MobillErrorCode.Known] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  case known(NHNCloudIAPKit.MobillErrorCode.Known)
  case unknown(Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 15.0.0, *)
public struct MobillError : Swift.Error {
  public let code: NHNCloudIAPKit.MobillErrorCode
  public let message: Swift.String?
}
@available(iOS 15.0.0, *)
public struct MobillStoreError : Swift.Error {
  public let code: Swift.Int?
  public let message: Swift.String?
}
extension NHNCloudIAPKit.MobillError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension NHNCloudIAPKit.MobillError : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension NHNCloudIAPKit.MobillError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
extension NHNCloudIAPKit.MobillErrorCode {
  public static func ~= (pattern: NHNCloudIAPKit.MobillErrorCode.Known, value: NHNCloudIAPKit.MobillErrorCode) -> Swift.Bool
}
extension NHNCloudIAPKit.MobillErrorCode : Swift.Equatable {
  public static func == (lhs: NHNCloudIAPKit.MobillErrorCode, rhs: NHNCloudIAPKit.MobillErrorCode) -> Swift.Bool
  public static func == (lhs: NHNCloudIAPKit.MobillErrorCode, rhs: NHNCloudIAPKit.MobillErrorCode.Known) -> Swift.Bool
  public static func == (lhs: NHNCloudIAPKit.MobillErrorCode.Known, rhs: NHNCloudIAPKit.MobillErrorCode) -> Swift.Bool
}
extension NHNCloudIAPKit.MobillStoreError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension NHNCloudIAPKit.MobillStoreError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
@available(iOS 15.0.0, *)
public struct InAppPurchaseResult {
  public var userId: Swift.String {
    get
  }
  public var storeCode: Swift.String {
    get
  }
  public var productIdentifier: Swift.String {
    get
  }
  public var productSeq: Swift.Int64 {
    get
  }
  public var productType: NHNCloudIAPKit.InAppPurchaseProductType {
    get
  }
  public var price: Foundation.Decimal {
    get
  }
  public var currency: Swift.String {
    get
  }
  public var paymentSeq: Swift.String {
    get
  }
  public var accessToken: Swift.String {
    get
  }
  public var transactionIdentifier: Swift.String? {
    get
  }
  public var originalTransactionIdentifier: Swift.String? {
    get
  }
  public var purchaseTime: Foundation.TimeInterval {
    get
  }
  public var expiryTime: Foundation.TimeInterval? {
    get
  }
  public var isSandboxPayment: Swift.Bool {
    get
  }
  public var payload: Swift.String? {
    get
  }
  public var isStorePayment: Swift.Bool {
    get
  }
}
extension NHNCloudIAPKit.InAppPurchaseResult : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension NHNCloudIAPKit.InAppPurchaseResult : @unchecked Swift.Sendable {
}
extension NHNCloudIAPKit.InAppPurchaseResult : Swift.Equatable {
  public static func == (lhs: NHNCloudIAPKit.InAppPurchaseResult, rhs: NHNCloudIAPKit.InAppPurchaseResult) -> Swift.Bool
}
extension NHNCloudIAPKit.InAppPurchaseResult : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(iOS 15.0.0, *)
@_Concurrency.MainActor public protocol InAppPurchaseProtocol : AnyObject {
  @_Concurrency.MainActor func shouldAddStorePurchaseForProduct(_ product: NHNCloudIAPKit.InAppPurchaseProduct) -> Swift.Bool
  @_Concurrency.MainActor func didReceivePurchaseResult(_ purchaseResult: NHNCloudIAPKit.InAppPurchaseResult?, _ error: NHNCloudIAPKit.InAppPurchaseError?)
}
@_hasMissingDesignatedInitializers @available(iOS 15.0.0, *)
open class NHNCloudInAppPurchase {
  public static func setUserId(_ userId: Swift.String?)
  public static func userId() -> Swift.String?
  public static func initialize(configuration: NHNCloudIAPKit.Configuration, _ delegate: Swift.AnyObject? = nil)
  public static func setDelegate(_ delegate: any NHNCloudIAPKit.InAppPurchaseProtocol)
  public static func requestProducts(completion: @escaping (_ productResponse: NHNCloudIAPKit.InAppPurchaseProductsResponse?, _ error: (any Swift.Error)?) -> Swift.Void)
  public static func purchase(productId: Swift.String, payload: Swift.String? = nil, extraData: [Swift.String : Swift.String]? = nil, completion: @escaping (_ purchaseResult: NHNCloudIAPKit.InAppPurchaseResult?, _ error: (any Swift.Error)?) -> Swift.Void)
  public static func purchase(product: NHNCloudIAPKit.InAppPurchaseProduct, payload: Swift.String? = nil, extraData: [Swift.String : Swift.String]? = nil, completion: @escaping (_ purchaseResult: NHNCloudIAPKit.InAppPurchaseResult?, _ error: (any Swift.Error)?) -> Swift.Void)
  public static func requestConsumablePurchases(completion: @escaping (_ purchaseResult: [NHNCloudIAPKit.InAppPurchaseResult]?, _ error: (any Swift.Error)?) -> Swift.Void)
  public static func requestAllMarketsConsumablePurchases(completion: @escaping (_ purchaseResult: [NHNCloudIAPKit.InAppPurchaseResult]?, _ error: (any Swift.Error)?) -> Swift.Void)
  public static func restore(completion: @escaping (_ purchaseResult: [NHNCloudIAPKit.InAppPurchaseResult]?, _ error: (any Swift.Error)?) -> Swift.Void)
  public static func requestActivePurchases(completion: @escaping (_ purchaseResult: [NHNCloudIAPKit.InAppPurchaseResult]?, _ error: (any Swift.Error)?) -> Swift.Void)
  public static func requestActiveSubscriptions(completion: @escaping (_ purchaseResult: [NHNCloudIAPKit.InAppPurchaseResult]?, _ error: (any Swift.Error)?) -> Swift.Void)
  public static func requestAllMarketsActiveSubscriptions(completion: @escaping (_ purchaseResult: [NHNCloudIAPKit.InAppPurchaseResult]?, _ error: (any Swift.Error)?) -> Swift.Void)
  public static func setDebugMode(_ debugMode: Swift.Bool)
  public static func isDebugMode() -> Swift.Bool
  public static func version() -> Swift.String
  @objc deinit
}
@available(iOS 15.0.0, *)
extension NHNCloudIAPKit.NHNCloudInAppPurchase {
  #if compiler(>=5.3) && $AsyncAwait
  public static func requestProducts() async throws -> NHNCloudIAPKit.InAppPurchaseProductsResponse
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func purchase(productId: Swift.String, payload: Swift.String? = nil, extraData: [Swift.String : Swift.String]? = nil) async throws -> NHNCloudIAPKit.InAppPurchaseResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func purchase(product: NHNCloudIAPKit.InAppPurchaseProduct, payload: Swift.String? = nil, extraData: [Swift.String : Swift.String]? = nil) async throws -> NHNCloudIAPKit.InAppPurchaseResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func restore() async throws -> [NHNCloudIAPKit.InAppPurchaseResult]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func requestConsumablePurchases() async throws -> [NHNCloudIAPKit.InAppPurchaseResult]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func requestAllMarketsConsumablePurchases() async throws -> [NHNCloudIAPKit.InAppPurchaseResult]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func requestActivePurchases() async throws -> [NHNCloudIAPKit.InAppPurchaseResult]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func requestActiveSubscriptions() async throws -> [NHNCloudIAPKit.InAppPurchaseResult]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func requestAllMarketsActiveSubscriptions() async throws -> [NHNCloudIAPKit.InAppPurchaseResult]
  #endif
}
@available(iOS 15.0.0, *)
extension NHNCloudIAPKit.NHNCloudInAppPurchaseServiceZone : Swift.Equatable {}
@available(iOS 15.0.0, *)
extension NHNCloudIAPKit.NHNCloudInAppPurchaseServiceZone : Swift.Hashable {}
@available(iOS 15.0.0, *)
extension NHNCloudIAPKit.NHNCloudInAppPurchaseServiceZone : Swift.RawRepresentable {}
@available(iOS 15.0.0, *)
extension NHNCloudIAPKit.InAppPurchaseProductType : Swift.Equatable {}
@available(iOS 15.0.0, *)
extension NHNCloudIAPKit.InAppPurchaseProductType : Swift.Hashable {}
@available(iOS 15.0.0, *)
extension NHNCloudIAPKit.InAppPurchaseProductType : Swift.RawRepresentable {}
@available(iOS 15.0.0, *)
extension NHNCloudIAPKit.MobillErrorCode.Known : Swift.Equatable {}
@available(iOS 15.0.0, *)
extension NHNCloudIAPKit.MobillErrorCode.Known : Swift.Hashable {}
@available(iOS 15.0.0, *)
extension NHNCloudIAPKit.MobillErrorCode.Known : Swift.RawRepresentable {}
